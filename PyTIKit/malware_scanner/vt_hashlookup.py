import vt
import time

VT_API_KEY = 'API_KEY'

# Create a client
client = vt.Client(VT_API_KEY)

# Counter to count the current number of requests
counter = 0

# Query function
def query_vt(hashes):
    # Setting the scope of counter as it needs to be accessed multiple places
    global counter
    # Loop through hashes
    for filepath, md5_hashes in list(hashes.items()):
        # Exception handling
        try:
            # If counter hits the limit, let the user know and wait 61 seconds
            if counter >= 4:
                print("Rate limit reached, waiting for 62 seconds")
                time.sleep(32)
                print("30 Seconds remaining....")
                time.sleep(30)
                # Reset the counter after the wait time
                counter = 0
            
            # Create variable to store VT response
            vt_obj =  client.get_object(f'/files/'+md5_hashes)
            # Logic to test if hash is found as malicious
            if vt_obj.last_analysis_stats['malicious'] > 0:
                # Construct the VirusTotal search URL so user can click on it in report
                search_url = f"https://www.virustotal.com/gui/file/{md5_hashes}/detection"

                # Extract information from vt_object and store in nested dictionary
                hashes[filepath] = {
                    'hash': md5_hashes,
                    'vt_report': {
                        'md5': vt_obj.md5,
                        'sha1': vt_obj.sha1,
                        'sha256': vt_obj.sha256,
                        'file_type': vt_obj.type_description,
                        'size': vt_obj.size,
                        'first_submission_date': vt_obj.first_submission_date,
                        'last_analysis_date': vt_obj.last_analysis_date,
                        'last_analysis_stats': vt_obj.last_analysis_stats,
                        'total_votes': vt_obj.total_votes,
                        'search_url': search_url  
                        }
                    }
            # Delete the entry in the dictionary is found non-malicious by VT
            else:
                del hashes[filepath]
                
        # Exception handling
        except vt.error.APIError as error:
            # Checking to see if the error is related to not found, if it is delete the hash
            if 'NotFoundError' in str(error):
                print(error)
                print("Hash not found, removing from dictionary")
                del hashes[filepath]
            # If the return from VT is rate limit exceeded, make the application wait 62 seconds     
            elif 'QuotaExceededError' in str(error):
                print(error)
                print("Quota exceeded, waiting for one minute...\n")
                print(f"Hash has been skipped : {md5_hashes}")
                time.sleep(62)
            # For any other type of error let the user know the hash has been skipped
            else:
                print(f"Unknown error: {error}")
                print(f"Hash has been skipped : {md5_hashes}")
            
            # Iterate the counter after each query
            counter+=1
    # Close the vt-py client   
    client.close()
            
    
    # Return dictionary after processing
    return hashes


